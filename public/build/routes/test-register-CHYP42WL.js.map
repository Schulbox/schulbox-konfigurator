{
  "version": 3,
  "sources": ["../../../app/routes/test-register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\test-register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\test-register.tsx\");\n  import.meta.hot.lastModified = \"1745246238000.6565\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { supabase } from \"../lib/supabaseClient\";\nexport default function TestRegister() {\n  _s();\n  const [email, setEmail] = useState(\"kamal.a15190@gmail.com\");\n  const [password, setPassword] = useState(\"12345678\");\n  const [message, setMessage] = useState(\"\");\n  const handleTestRegister = async () => {\n    console.log(\"\u2705 signup() wurde aufgerufen\");\n    setMessage(\"\u23F3 Registrierung wird verarbeitet...\");\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (error) {\n      console.error(\"\u274C Fehler bei der Registrierung:\", error.message);\n      setMessage(\"\u274C Fehler: \" + error.message);\n    } else {\n      console.log(\"\u2705 Registrierung erfolgreich:\", data);\n      setMessage(\"\u2705 Registrierung erfolgreich! Bitte E-Mail best\u00E4tigen.\");\n    }\n  };\n  return <div style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    padding: \"3rem\"\n  }}>\r\n      <div style={{\n      maxWidth: \"400px\",\n      width: \"100%\",\n      textAlign: \"center\"\n    }}>\r\n        <h2>Testregistrierung</h2>\r\n\r\n        <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"E-Mail\" style={{\n        width: \"100%\",\n        padding: \"0.75rem\",\n        marginBottom: \"1rem\",\n        borderRadius: \"5px\",\n        border: \"1px solid #ccc\"\n      }} />\r\n\r\n        <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Passwort\" style={{\n        width: \"100%\",\n        padding: \"0.75rem\",\n        marginBottom: \"1.5rem\",\n        borderRadius: \"5px\",\n        border: \"1px solid #ccc\"\n      }} />\r\n\r\n        <button onClick={handleTestRegister} style={{\n        width: \"100%\",\n        padding: \"0.75rem\",\n        backgroundColor: \"#2563eb\",\n        color: \"#fff\",\n        fontWeight: \"bold\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        cursor: \"pointer\",\n        transition: \"background-color 0.3s ease\"\n      }} onMouseOver={e => e.currentTarget.style.backgroundColor = \"#1e40af\"} onMouseOut={e => e.currentTarget.style.backgroundColor = \"#2563eb\"}>\r\n          Testregistrieren\r\n        </button>\r\n\r\n        <p style={{\n        marginTop: \"1.5rem\",\n        color: \"#333\"\n      }}>{message}</p>\r\n      </div>\r\n    </div>;\n}\n_s(TestRegister, \"xJWfA2JSvWXgP/EncuMWB2b/o6M=\");\n_c = TestRegister;\nvar _c;\n$RefreshReg$(_c, \"TestRegister\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
